# Generated by Django 4.2 on 2025-09-24 10:55

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('suppliers', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='SyncTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_type', models.CharField(choices=[('FULL_SYNC', 'Sincronizzazione Completa'), ('PRODUCTS_SYNC', 'Sincronizzazione Prodotti'), ('STOCK_SYNC', 'Sincronizzazione Stock'), ('PRICES_SYNC', 'Sincronizzazione Prezzi'), ('WOOCOMMERCE_SYNC', 'Sincronizzazione WooCommerce')], max_length=20, verbose_name='Tipo Task')),
                ('priority', models.IntegerField(choices=[(1, 'Bassa'), (2, 'Normale'), (3, 'Alta'), (4, 'Critica')], default=2, verbose_name='Priorità')),
                ('status', models.CharField(choices=[('PENDING', 'In Attesa'), ('RUNNING', 'In Esecuzione'), ('SUCCESS', 'Completato'), ('ERROR', 'Errore'), ('CANCELLED', 'Annullato')], default='PENDING', max_length=20, verbose_name='Stato')),
                ('scheduled_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Programmato per')),
                ('started_at', models.DateTimeField(blank=True, null=True, verbose_name='Iniziato il')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='Completato il')),
                ('items_processed', models.IntegerField(default=0, verbose_name='Elementi Elaborati')),
                ('items_success', models.IntegerField(default=0, verbose_name='Successi')),
                ('items_errors', models.IntegerField(default=0, verbose_name='Errori')),
                ('error_message', models.TextField(blank=True, verbose_name='Messaggio Errore')),
                ('task_data', models.JSONField(blank=True, default=dict, verbose_name='Dati Task')),
                ('result_data', models.JSONField(blank=True, default=dict, verbose_name='Risultati')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Creato il')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Aggiornato il')),
                ('celery_task_id', models.CharField(blank=True, max_length=255, verbose_name='Celery Task ID')),
                ('supplier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sync_tasks', to='suppliers.supplier')),
            ],
            options={
                'verbose_name': 'Task di Sincronizzazione',
                'verbose_name_plural': 'Task di Sincronizzazione',
                'ordering': ['-priority', 'scheduled_at'],
            },
        ),
        migrations.CreateModel(
            name='SyncRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Nome Regola')),
                ('description', models.TextField(blank=True, verbose_name='Descrizione')),
                ('conditions', models.JSONField(default=dict, verbose_name='Condizioni')),
                ('actions', models.JSONField(default=dict, verbose_name='Azioni')),
                ('is_active', models.BooleanField(default=True, verbose_name='Attiva')),
                ('priority', models.IntegerField(default=100, verbose_name='Priorità')),
                ('times_applied', models.IntegerField(default=0, verbose_name='Volte Applicata')),
                ('last_applied', models.DateTimeField(blank=True, null=True, verbose_name='Ultima Applicazione')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('supplier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sync_rules', to='suppliers.supplier')),
            ],
            options={
                'verbose_name': 'Regola di Sincronizzazione',
                'verbose_name_plural': 'Regole di Sincronizzazione',
                'ordering': ['priority', 'name'],
            },
        ),
        migrations.CreateModel(
            name='SyncError',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('error_type', models.CharField(choices=[('API_ERROR', 'Errore API'), ('PARSING_ERROR', 'Errore Parsing'), ('VALIDATION_ERROR', 'Errore Validazione'), ('MAPPING_ERROR', 'Errore Mapping'), ('WOOCOMMERCE_ERROR', 'Errore WooCommerce'), ('SYSTEM_ERROR', 'Errore Sistema')], max_length=20, verbose_name='Tipo Errore')),
                ('severity', models.CharField(choices=[('LOW', 'Basso'), ('MEDIUM', 'Medio'), ('HIGH', 'Alto'), ('CRITICAL', 'Critico')], default='MEDIUM', max_length=10, verbose_name='Severità')),
                ('error_code', models.CharField(blank=True, max_length=50, verbose_name='Codice Errore')),
                ('error_message', models.TextField(verbose_name='Messaggio Errore')),
                ('context_data', models.JSONField(blank=True, default=dict, verbose_name='Dati Contesto')),
                ('stack_trace', models.TextField(blank=True, verbose_name='Stack Trace')),
                ('object_type', models.CharField(blank=True, max_length=50, verbose_name='Tipo Oggetto')),
                ('object_id', models.CharField(blank=True, max_length=100, verbose_name='ID Oggetto')),
                ('is_resolved', models.BooleanField(default=False, verbose_name='Risolto')),
                ('resolution_notes', models.TextField(blank=True, verbose_name='Note Risoluzione')),
                ('resolved_at', models.DateTimeField(blank=True, null=True, verbose_name='Risolto il')),
                ('occurred_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Occorso il')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('supplier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sync_errors', to='suppliers.supplier')),
                ('sync_task', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='errors', to='sync.synctask')),
            ],
            options={
                'verbose_name': 'Errore di Sincronizzazione',
                'verbose_name_plural': 'Errori di Sincronizzazione',
                'ordering': ['-occurred_at'],
            },
        ),
        migrations.CreateModel(
            name='DataMapping',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mapping_type', models.CharField(choices=[('CATEGORY', 'Categoria'), ('ATTRIBUTE', 'Attributo'), ('STATUS', 'Stato'), ('FIELD', 'Campo')], max_length=20, verbose_name='Tipo Mapping')),
                ('source_field', models.CharField(max_length=200, verbose_name='Campo Sorgente')),
                ('source_value', models.CharField(max_length=500, verbose_name='Valore Sorgente')),
                ('target_field', models.CharField(max_length=200, verbose_name='Campo Destinazione')),
                ('target_value', models.CharField(max_length=500, verbose_name='Valore Destinazione')),
                ('is_active', models.BooleanField(default=True, verbose_name='Attivo')),
                ('transformation_rule', models.TextField(blank=True, verbose_name='Regola di Trasformazione')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('supplier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='data_mappings', to='suppliers.supplier')),
            ],
            options={
                'verbose_name': 'Mapping Dati',
                'verbose_name_plural': 'Mapping Dati',
                'unique_together': {('supplier', 'mapping_type', 'source_field', 'source_value')},
            },
        ),
    ]
